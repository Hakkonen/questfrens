"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const fs = require("fs");
const https = require("https");
async function downloadImage(url, filename, folder) {
    return new Promise((resolve, reject) => {
        https.get(url, function (response) {
            if (response.statusCode !== 200) {
                console.error(`Error: Unable to download ${url} (status code: ${response.statusCode}).`);
                reject(new Error(`Status code: ${response.statusCode}`));
                return;
            }
            fs.access(folder, fs.constants.W_OK, function (err) {
                if (err) {
                    console.error(`Error: Unable to write to ${folder} (${err.message}).`);
                    reject(err);
                    return;
                }
                response
                    .pipe(fs.createWriteStream(filename))
                    .on("error", function (err) {
                    console.error(`Error: Unable to save ${filename} (${err.message}).`);
                    reject(err);
                })
                    .on("close", resolve);
            });
        });
    });
}
module.exports = async function downloadImagesInBatches(imagesURLs, imageFileNames, folder, batchSize) {
    const batches = Math.ceil(imagesURLs.length / batchSize); // determine the number of batches
    for (let i = 0; i < batches; i++) {
        const start = i * batchSize; // calculate the start index of the batch
        const end = Math.min(imagesURLs.length, start + batchSize); // calculate the end index of the batch
        const batchURLs = imagesURLs.slice(start, end); // slice the URLs for the current batch
        const batchFileNames = imageFileNames.slice(start, end); // slice the file names for the current batch
        if (batchFileNames[i].fullPath === undefined) {
            // log an error if the fullPath is not defined
            console.error(`Error: Unable to download ${batchURLs[i]} (fullPath is undefined).`);
            return;
        }
        const promises = batchURLs.map((url, index) => downloadImage(url, batchFileNames[index].fullPath, folder)); // create an array of promises for downloading images in the batch
        try {
            await Promise.all(promises); // download images in parallel for the current batch
        }
        catch (err) {
            console.error(`Error: Unable to download remote images (${err.message}).`);
        }
    }
};
